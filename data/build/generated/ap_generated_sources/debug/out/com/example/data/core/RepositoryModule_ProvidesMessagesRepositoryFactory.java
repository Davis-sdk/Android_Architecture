// Generated by Dagger (https://google.github.io/dagger).
package com.example.data.core;

import com.example.data.messages.MessagesRepositoryImpl;
import com.example.domain.messages.repository.MessagesRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class RepositoryModule_ProvidesMessagesRepositoryFactory
    implements Factory<MessagesRepository> {
  private final RepositoryModule module;

  private final Provider<MessagesRepositoryImpl> repositoryProvider;

  public RepositoryModule_ProvidesMessagesRepositoryFactory(
      RepositoryModule module, Provider<MessagesRepositoryImpl> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public MessagesRepository get() {
    return provideInstance(module, repositoryProvider);
  }

  public static MessagesRepository provideInstance(
      RepositoryModule module, Provider<MessagesRepositoryImpl> repositoryProvider) {
    return proxyProvidesMessagesRepository(module, repositoryProvider.get());
  }

  public static RepositoryModule_ProvidesMessagesRepositoryFactory create(
      RepositoryModule module, Provider<MessagesRepositoryImpl> repositoryProvider) {
    return new RepositoryModule_ProvidesMessagesRepositoryFactory(module, repositoryProvider);
  }

  public static MessagesRepository proxyProvidesMessagesRepository(
      RepositoryModule instance, MessagesRepositoryImpl repository) {
    return Preconditions.checkNotNull(
        instance.providesMessagesRepository(repository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
