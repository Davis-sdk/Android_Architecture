// Generated by Dagger (https://google.github.io/dagger).
package com.example.data.core;

import com.example.data.user.AuthRepositoryImpl;
import com.example.domain.user.repository.AuthRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class RepositoryModule_ProvidesAuthRepositoryFactory
    implements Factory<AuthRepository> {
  private final RepositoryModule module;

  private final Provider<AuthRepositoryImpl> repositoryProvider;

  public RepositoryModule_ProvidesAuthRepositoryFactory(
      RepositoryModule module, Provider<AuthRepositoryImpl> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public AuthRepository get() {
    return provideInstance(module, repositoryProvider);
  }

  public static AuthRepository provideInstance(
      RepositoryModule module, Provider<AuthRepositoryImpl> repositoryProvider) {
    return proxyProvidesAuthRepository(module, repositoryProvider.get());
  }

  public static RepositoryModule_ProvidesAuthRepositoryFactory create(
      RepositoryModule module, Provider<AuthRepositoryImpl> repositoryProvider) {
    return new RepositoryModule_ProvidesAuthRepositoryFactory(module, repositoryProvider);
  }

  public static AuthRepository proxyProvidesAuthRepository(
      RepositoryModule instance, AuthRepositoryImpl repository) {
    return Preconditions.checkNotNull(
        instance.providesAuthRepository(repository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
